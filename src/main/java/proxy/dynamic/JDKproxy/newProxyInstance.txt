方法newProxyInstance:
        这个方法的作用是:在运行时,动态创建一组指定的接口的实现类对象;
        动态代理的作用是最终学习AOP, 也就是面向切面编程;
        面向切面编程和装饰器有点相似，但比装饰器更加灵活。

        三个参数，按照顺序分别是 ClassLoader (类加载器),interfaces(一组接口，接口数组)，InvocationHandler（调用处理器）。

        ClassLoader （类加载器）：
            我们在计算机硬盘写了代码，编译之后，产生字节码文件，例如A.class，
            这个字节码文件先要加载到JVM内存中才可以跑起来。
            从硬盘把字节码加载到JVM内存中，需要一个对象去完成这个操作，这个对象就叫ClassLoader
            （类加载器）。关于类加载，学习完动态代理，我们再来详细学习一下这个知识点。

        interfaces 接口数组：
            这个参数是一个接口数组，假如我们有接口A和接口B，那么这个参数传进去的写法就是这样
            Class[]{A.class, B.class}，这个好理解。
            通过这个方法，得到的代理对象，同时创建了接口A和接口B的具体实现类对象。

        InvocationHandler 调用处理器：
            调用处理器是一个接口。
            它的作用是：代理对象的几乎所有方法都会调用InvocationHandler的invoke()方法，
            其中getClass()方法不执行。
